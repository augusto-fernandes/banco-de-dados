/*ASSUNTO - DELIMITADOR */

CREATE DATABASE AULA_SQL

CREATE database aula_sql02

use aula_sql

create table teste(
	nome varchar(30)
)

create database BANCO01

USE BANCO01

CREATE TABLE TESTE(
	NOME VARCHAR(30)
)

create database banco04
go

use banco04
go

create table teste(
	nome varchar(30)
)
go

drop database banco04
go

/*
	ORGANIZAR FISICAMENTE E LOGICAMENTE UM BANCO DE DADOS

	1- CRIAR O BANCO COM ARQUIVOS PARA OS SETORES DE MKT E VENDAS
	2- CRIAR UM ARQUIVO GERAL 
	3- DEIXAR O MDF APENAS COM O DICIONARIO DE DADOS
	4- CRIAR 2 GRUPOS DE ARQUIVOS(PRIMARY - MDF)
*/

CREATE TABLE TB_EMPRESA(
		ID INT,
		NOME VARCHAR(50)
)
GO

/* CONECTANDO A UM BANCO*/
USE EMPRESA
GO

/* CRIACAO DE TABELAS*/
CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)
GO

/*CONSTRAINTS */

ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN ('M', 'F'))
GO

/* 1 X 1*/

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY IDENTITY(100,10),
	BAIRRO VARCHAR(30),
	UF CHAR(2) NOT NULL,
	CHECK (UF IN('RJ','SP','MG')),
	ID_ALUNO INT UNIQUE
)
GO

/* CRIANDO A FK */

ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO

/* COMANDOS DE DESCRICAO*/

/* PROCEDURES - JA CRIADAS E ARMAZENADAS NO SISTEMA*/

SP_COLUMNS ALUNO
GO

SP_HELP ALUNO
GO

/* INSERINDO DADOS */

INSERT INTO ALUNO VALUES('ANDRE','M','1981/12/09','ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA','F','1978/03/09','ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI','M','1965/07/09','RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOAO','M','2002/11/09','JOAO@IG.COM')
GO

SELECT * FROM ALUNO
GO

/*ENDERECO*/
INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES('MORUMBI','SP',2)
INSERT INTO ENDERECO VALUES('CENTRO','MG',4)
INSERT INTO ENDERECO VALUES('CENTRO','SP',3)
GO

SELECT * FROM ENDERECO
GO

/* CRIANDO A TABELA TELEFONES */

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_ALUNO INT,
	CHECK (TIPO IN ('RES','COM','CEL'))
)
GO

INSERT INTO TELEFONE VALUES('CEL','8738127',1)
INSERT INTO TELEFONE VALUES('RES', '4123123',1)
INSERT INTO TELEFONE VALUES('COM', '4326611',2)
INSERT INTO TELEFONE VALUES('CEL', '2341244',2)
GO

/* PEGAR DATA ATUAL */

SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA - ONDE SO MOSTRA QUEM TEM TELEFONE*/
SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO,E.UF
FROM ALUNO A
INNER JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/* TRAZENDO ATE QUEM NAO TEM NUMERO*/
SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO,E.UF
FROM ALUNO A
LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/* IFNULL */
SELECT	A.NOME, 
		ISNULL(T.TIPO ,'SEM') AS TIPO, 
		ISNULL( T.NUMERO,'NUMERO') AS 'TELEFONE',
		E.BAIRRO,
		E.UF
FROM ALUNO A
LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/* DATAS */
SELECT * FROM ALUNO
GO

SELECT NOME, NASCIMENTO
FROM ALUNO
GO

/*DATEDIFF- CALCULA A DIFERENÇA ENTRE 2 DATAS
  FUNCAO GETDATE() TRAS DIA E HORA
*/
SELECT NOME, GETDATE() AS DIA_HORA FROM ALUNO
GO

/* 1 PASSO */
SELECT NOME, DATEDIFF(DAY,NASCIMENTO,GETDATE())
FROM ALUNO
GO

/* 2 PASSO*/
SELECT NOME, DATEDIFF(DAY,NASCIMENTO,GETDATE()) AS 'IDADE'
FROM ALUNO
GO

/* 3 PASSSO - RETORNO EM INTEIRO + OPER MATEMATICA */
SELECT NOME, (DATEDIFF(DAY,NASCIMENTO,GETDATE())/365) AS 'IDADE'
FROM ALUNO
GO

SELECT NOME, (DATEDIFF(MONTH,NASCIMENTO,GETDATE())/12) AS 'IDADE'
FROM ALUNO
GO

SELECT NOME, DATEDIFF(YEAR,NASCIMENTO,GETDATE()) AS 'IDADE'
FROM ALUNO
GO

/* DATENAME - TRAS O NOME DA PARTE DA DATA EM QUESTAO*/

SELECT NOME, DATENAME(MONTH, NASCIMENTO)
FROM ALUNO 
GO

SELECT NOME, DATENAME(YEAR, NASCIMENTO)
FROM ALUNO 
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
FROM ALUNO 
GO

/* DATEPART - POREM O RETORNO É UM INTEIRO*/
SELECT NOME, DATEPART(MONTH, NASCIMENTO), DATENAME(MONTH,NASCIMENTO)
FROM ALUNO
GO

/*DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA*/
SELECT DATEADD(DAY,365,GETDATE())

SELECT DATEADD(YEAR,10,GETDATE())

/* CONVERSAO DE DADOS */

SELECT 1 + '1' -- RETORNA 2 MESMO UM SENDO INT E O OUTRO STRING
GO

SELECT '1' +'1' -- RETORNA 11
GO

/* FUNCOES DE CONVERSAO DE DADOS */
SELECT CAST('1' AS INT) + CAST ('1' AS INT)
GO

/* CONVERSAO E CONCATENACAO
https://docs.microsoft.com/pt-br/sql/t-sql/data-types/data-type-conversion-database-engine?view=sql-server-ver16
*/

SELECT NOME,
NASCIMENTO
FROM ALUNO
GO

SELECT NOME,
DAY(NASCIMENTO) +'/' + MONTH(NASCIMENTO) + '/' + YEAR(NASCIMENTO)
FROM ALUNO
GO

/* EXERCICIO */

SELECT NOME,
CAST(DAY(NASCIMENTO) AS varchar) +'/'+
CAST(MONTH(NASCIMENTO) AS VARCHAR) + '/' + 
CAST(YEAR(NASCIMENTO) AS VARCHAR) AS 'NASCIMENTO'
FROM ALUNO
GO

/* CHARINDEX - RETORNA UM INTEIRO
CONTAGEM DEFAULT - INICIA EM 01
*/

SELECT NOME, CHARINDEX('A', NOME) AS INDICE
FROM ALUNO
GO

SELECT NOME, CHARINDEX('A', NOME,2) AS INDICE
FROM ALUNO
GO

/* BULK INSERT - IMPORTACAO DE ARQUIVOS */

CREATE TABLE LANCAMENTO_CONTABIL(
	CONTA INT,
	VALOR INT,
	DEB_CRED CHAR(1)
)
GO
SELECT * FROM LANCAMENTO_CONTABIL
GO

/* \t = TAB */
BULK INSERT LANCAMENTO_CONTABIL
FROM 'C:\Users\augusto\Desktop\Cursos\Banco-de-dados\SCRIPTS\CONTAS.txt'
WITH(
		
	FIRSTROW = 2,
	DATAFILETYPE = 'char',
	FIELDTERMINATOR = '\t',
	ROWTERMINATOR = '\n'
)
GO

SELECT * FROM LANCAMENTO_CONTABIL

/* DESAFIO DO SALDO
QUERY QUE TRAGA O NUMERO DA CONTA
SALDO - DEVEDOR OU CREDOR
*/

SELECT CONTA, VALOR,DEB_CRED,
CHARINDEX('D', DEB_CRED) AS DEBITO,
CHARINDEX('C', DEB_CRED) AS CREDITO,
CHARINDEX('C', DEB_CRED)*2 -1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL  
GO

SELECT CONTA,
SUM(VALOR *(CHARINDEX('C',DEB_CRED)*2 -1)) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
GO

/* TRIGGERS */

CREATE TABLE PRODUTOS(
	IDPRODUTO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
)
GO

CREATE TABLE HISTORICO(
	IDOPERACAO INT PRIMARY KEY IDENTITY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECOANTIGO NUMERIC(10,2) NOT NULL,
	PRECONOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
)
GO

INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER', 'LIVROS', 98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE', 'LIVROS', 50.00)
INSERT INTO PRODUTOS VALUES('LICENÇA POWERCENTER', 'SOFTWARES', 45000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I7', 'COMPUTADORES', 3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO BUSINESS INTELLIGENCE','LIVROS',90.00)
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

/* VERIFICANDO O USUARIO */

SELECT SUSER_NAME()
go

/* TRIGGER DE DADOS - DATA MANIPULATION LANGUAGE */

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE
AS
	DECLARE @IDPRODUTO INT 
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(30)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @ACAO VARCHAR(100)
	
	--PRIMEIRO BLOCO
	SELECT @IDPRODUTO =  IDPRODUTO FROM inserted
	SELECT @PRODUTO = NOME FROM inserted
	SELECT @CATEGORIA = CATEGORIA FROM inserted
	SELECT @PRECO = PRECO FROM deleted
	SELECT @PRECONOVO = PRECO FROM inserted
	
	--SEGUNDO BLOCO 
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO
	(PRODUTO, CATEGORIA, PRECOANTIGO,PRECONOVO, DATA, USUARIO,MENSAGEM)
	VALUES(@PRODUTO,@CATEGORIA,@PRECO,@PRECONOVO,@DATA,@USUARIO,@ACAO)

	PRINT 'TRIGGER EXECUTADA COM SUCESSO'

	GO

/* EXECUTANDO UM UPDATE */
UPDATE PRODUTOS SET PRECO = 100.00
WHERE IDPRODUTO = 1
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

UPDATE PRODUTOS SET NOME = 'LIVRO C#'
WHERE IDPRODUTO = 1
GO

/* PROGRAMANDO TRIGGER EM UMA COLUNA */

DROP TRIGGER TRG_ATUALIZA_PRECO

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE AS
IF UPDATE(PRECO)
BEGIN 
	DECLARE @IDPRODUTO INT 
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(30)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @ACAO VARCHAR(100)
	
	--PRIMEIRO BLOCO
	SELECT @IDPRODUTO =  IDPRODUTO FROM inserted
	SELECT @PRODUTO = NOME FROM inserted
	SELECT @CATEGORIA = CATEGORIA FROM inserted
	SELECT @PRECO = PRECO FROM deleted
	SELECT @PRECONOVO = PRECO FROM inserted
	
	--SEGUNDO BLOCO 
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO
	(PRODUTO, CATEGORIA, PRECOANTIGO,PRECONOVO, DATA, USUARIO,MENSAGEM)
	VALUES(@PRODUTO,@CATEGORIA,@PRECO,@PRECONOVO,@DATA,@USUARIO,@ACAO)

	PRINT 'TRIGGER EXECUTADA COM SUCESSO'
END
GO

UPDATE PRODUTOS SET PRECO = 300.00
WHERE IDPRODUTO = 2
GO

SELECT * FROM HISTORICO

UPDATE PRODUTOS SET NOME = 'LIVRO JAVA'
WHERE IDPRODUTO = 2
GO